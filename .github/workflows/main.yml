name: Main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  # Change this to invalidate existing cache.
  CACHE_PREFIX: v0
  PYTHONPATH: ./
  PYTEST_ADDOPTS: -v --color=yes -n auto --dist loadscope
  GITHUB_PR_NUMBER: ${{ github.event.number }}

jobs:
  checks:
    name: ${{ matrix.os }}, ${{ matrix.tox_env }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allowed_fail }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python: '3.11'
            tox_env: py311-test-cov'
            gammapy_data_path: /home/runner/work/asgardpy/asgardpy/gammapy-datasets/1.1/
            allowed_fail: false
          - os: macos-latest
            python: '3.11'
            tox_env: py311-test-cov
            gammapy_data_path: /Users/runner/work/asgardpy/asgardpy/gammapy-datasets/1.1/
            allowed_fail: false
          - os: windows-latest
            python: '3.11'
            tox_env: py311-test-cov
            gammapy_data_path: D:\a\asgardpy\asgardpy\gammapy-datasets\1.1\
            allowed_fail: false

        task:
          - name: Test
            if: ${{ matrix.gammapy_data_path }}
            env:
              GAMMAPY_DATA: ${{ matrix.gammapy_data_path}}
            run: tox -e ${{ matrix.tox_env }} -- -n auto --dist loadscope

        include:
          - task:
              name: Build
              run: |
                python -m build

          - task:
              name: Docs
              run: cd docs && make html

    steps:
      - name: Increase swapfile
        run: |
          sudo swapoff -a
          sudo fallocate -l 15G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon --show

      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python }} environment
        uses: ./.github/actions/setup-venv
        with:
          python-version: ${{ matrix.python }}
          cache-prefix: ${{ env.CACHE_PREFIX }}

      - name: Produce Changelog
        if: matrix.task.name == 'Docs'
        run: |
          python -m pip install towncrier
          python -m pip install -e .[dev]
          towncrier build --yes

      - name: Download Gammapy Datasets
        if: ${{ matrix.gammapy_data_path }}
        run: |
          python -m pip install tqdm requests
          python -m pip install -e .[dev]

          gammapy download datasets

      - name: Download test data
        if: matrix.task.name == 'Test'
        run: |
          ./scripts/download_asgardpy_data.sh

      - name: ${{ matrix.task.name }}
        run: |
          . .venv/bin/activate
          ${{ matrix.task.run }}

      - name: Upload coverage reports to Codecov
        if: "contains(matrix.tox_env, '-cov')"
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: ./coverage.xml
          verbose: true

      - name: Upload package distribution files
        if: matrix.task.name == 'Build'
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: dist

      - name: Clean up
        if: always()
        run: |
          . .venv/bin/activate
          pip uninstall -y asgardpy

  release:  # Separate this into a unique yml file?
    name: Release
    runs-on: ubuntu-latest
    needs: [checks]  # Only build is used in standard PyPA
    if: startsWith(github.ref, 'refs/tags/')
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install requirements
        run: |
          pip install --upgrade build towncrier
          python -m build

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v3
        with:
          name: package
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # skip-existing: true  # remove this for post 0.4.1 releases
          verbose: true

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # body_path: ${{ github.workspace }}-RELEASE_NOTES.md - Removed for post 0.4.1
          # prerelease: ${{ contains(env.TAG, 'rc') }}
          files: |
            dist/*
